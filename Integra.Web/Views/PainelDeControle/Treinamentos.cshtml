@model  IList<Integra.Web.Models.TreinamentoViewModel>
@using Integra.Web.Helpers

@{
	ViewBag.Title = ": Painel de Controle Íntegra Medical : Histórico do Projeto : Treinamentos :";
	Layout = "~/Views/Shared/_LayoutMaster.module.cshtml";
}

@Scripts.Render("~/dataTables")

<div class="container-fluid" id="main-container" style="padding-top: 10px;">
	<div id="main-content" class="clearfix">
		<div id="page-content" class="clearfix">
			<div class="page-header position-relative">
				<h3>Treinamentos <small></small></h3>
			</div>
			<div class="row-fluid">
				<div class="row-fluid">
					<div class="span12">
						<!-- conteudo aqui -->
						<!-- PAGE CONTENT BEGINS HERE -->
						<div class="row-fluid">
							<div class="span12">
								<div id="DivPageTreinamentosViewModel">
									<table id="gridTableTreinamentos" data-bind="dataTable:
															{
																dataSource: Treinamentos,
																rowTemplate: 'gridTableTreinamentosTemplate',
																sPaginationType: 'bootstrap',
																iDisplayLength: 10,
																gridId: 'gridTableTreinamentos',
																sDom: 'fptr',
																autoWidth: false,
																columns:
																	[
																		{ 'name': 'DataRealizacao' },
																		{ 'name': 'Responsavel' },
																		{ 'name': 'Titulo' },
																		{ 'name': 'Descricao' },
																		{ 'name': 'Local' }
																	],
																options: {
																	oLanguage: {
																		sUrl: '@Url.Content("~/Content/table-lang-br.txt")    '
															}
														}
														}"
										class="table table-striped table-bordered table-hover">
										<thead>
											<tr>
												<th>Data</th>
												<th>Realizado Por</th>
												<th>Título</th>
												<th>Descrição</th>
												<th>Local</th>
												<th id="filterTableTreinamento"></th>
											</tr>
										</thead>
										<tbody>
										</tbody>
									</table>
									<div class="form-actions">
										@if (User.ToPessoa().Usuario.PertenceAoGrupo(ViewBag.GrupoIntegra))
										{
											<button data-bind="click: AdicionarTreinamento" class="bbtnn bbtnn-info"><i class="icon-ok"></i>Adicionar</button>
										}
										<button data-bind="visible: Treinamentos().length, click: generate_excel" class="bbtnn bbtnn-gray"><i class="icon-file"></i>Exportar</button>
									</div>
									<div style="display: none;" data-bind="dialog: { isOpen: NovoTreinamentoDialog, modal: true, title: '', width: '0px', height: '0px' }">
										<div data-bind="html: NovoTreinamentoHtml"></div>
									</div>
									<div style="display: none;" data-bind="dialog: { isOpen: ExcluirTreinamentoDialog, modal: true, title: '', width: '0px', height: '0px' }">
										<div class="modal">
											<div class="modal-header">
												<h4>Remover Treinamento</h4>
											</div>
											<div class="modal-body">
												<div data-bind="with: TreinamentoSendoExcluido">
													Você deseja remover este Treinamento?
												</div>
											</div>
											<div class="modal-footer">
												<button data-bind="click: CancelarExclucao" class="bbtnn bbtnn-gray" value="Não">Não</button>
												<button data-bind="click: EfetivarExclucao" class="bbtnn bbtnn-danger" value="Sim"><i class="icon-ok"></i>Sim</button>
											</div>
										</div>
									</div>
									<div style="display: none;" data-bind="dialog: { isOpen: AdicionarParicipantesDialog, modal: true, title: '', width: '0px', height: '0px' }">
										<div data-bind="html: AdicionarParicipantesHtml"></div>
									</div>
									<div style="display: none;" data-bind="dialog: { isOpen: AdicionarAnexoDialog, modal: true, title: '', width: '0px', height: '0px' }">
										<div data-bind="html: AdicionarAnexoHtml"></div>
									</div>
								</div>
							</div>
						</div>
						<!-- conteudo aqui -->
					</div>
				</div>
			</div>
		</div>
	</div>
</div>
@Html.Partial("_LayoutFooter")

<script id="gridTableTreinamentosTemplate" type="text/html">
	<td data-bind="date: DataRealizacao" style="width: 135px;"></td>
	<td data-bind="text: Responsavel"></td>
	<td data-bind="text: Titulo"></td>
	<td data-bind="text: Descricao"></td>
	<td data-bind="text: Local"></td>

	<td id="resultTableTreinamento" style="text-align: center; width: 40px;">
		<div class='hidden-phone visible-desktop btn-group'>
			@if (User.ToPessoa().Usuario.PertenceAoGrupo(ViewBag.GrupoIntegra))
			{
				<button data-bind="click: $root.Editar" class='btn btn-mini btn-info tooltip-info' data-rel="tooltip" title="Editar" data-placement="left"><i class='icon-edit'></i></button>
			}
			<button data-bind="click: AdicionarParticipantes" class='btn btn-mini btn-success tooltip-info' data-rel="tooltip" title="Participantes" data-placement="left"><i class='icon-user'></i></button>
			<button data-bind="click: AdicionarAnexo" class='btn btn-mini btn-warning tooltip-info' data-rel="tooltip" title="Anexos" data-placement="left"><i class='icon-file'></i></button>
			@if (User.ToPessoa().Usuario.PertenceAoGrupo(ViewBag.GrupoIntegra))
			{
				<button data-bind="click: $root.Excluir" class='btn btn-mini btn-danger tooltip-info' data-rel="tooltip" title="Excluir" data-placement="left"><i class='icon-trash'></i></button>
			}
		</div>
	</td>
</script>

<script type="text/javascript" language="javascript">
	$(document).ready(function () {
		var view = new TreinamentoViewModel();
		ko.applyBindingsWithValidation(ko.validatedObservable(view), $("#DivPageTreinamentosViewModel").get(0));

		$(".ui-dialog-titlebar").hide();
		$(".ui-dialog-buttonpane").hide();
	});
	
	function TreinamentosTableView(data, parent) {
		var self = this;
		self.Parent = parent;
		
		self.Codigo = data.Codigo;
		self.DataRealizacao = ko.observable(data.DataRealizacao);
		self.Responsavel = ko.observable(data.Responsavel.Nome);
		self.Local = ko.observable(data.Local);
		self.Titulo = ko.observable(data.Titulo);
		self.Descricao = ko.observable(data.Descricao);
		
		self.Editar = function(treinamento) {
			self.Parent.Editar(treinamento);            
		};
		
		self.Excluir = function(treinamento) {
			self.Parent.ExibirMensagemDeExcluir(treinamento);             
		};
		
		self.AdicionarParticipantes = function(treinamento) {
			self.Parent.AdicionarParticipantes(treinamento);
		};

		self.AdicionarAnexo = function(treinamento) {
			self.Parent.AdicionarAnexoParaTreinamento(treinamento);
		};
	}

	function TreinamentoViewModel() {
		var self = this;
		
		self.NovoTreinamentoDialog = ko.observable(false);        
		self.NovoTreinamentoHtml = ko.observable();
		
		self.TreinamentoSendoEditado = null;

		self.ExcluirTreinamentoDialog = ko.observable(false);
		self.TreinamentoSendoExcluido = ko.observable(null);
		
		self.AdicionarParicipantesDialog = ko.observable(false);
		self.AdicionarParicipantesHtml = ko.observable(null);
		self.AdicionarAnexoDialog = ko.observable(false);
		self.AdicionarAnexoHtml = ko.observable(null);

		var allData = @Html.Raw(Json.Encode(Model));
		var mappedData = jQuery.map(allData, function (item) { return new TreinamentosTableView(item, self); });
		self.Treinamentos = ko.observableArray(mappedData);
		
		arrumarLayout(self.Treinamentos().length);
		
		self.AdicionarTreinamento = function () {
			self.NovoTreinamentoHtml(null);
			$.get('@Url.Action("AddEditTreinamento", "PainelDeControle")', null, function (html) {
			    arrumarLayout(self.Treinamentos().length);
			    self.NovoTreinamentoHtml(html);
				new window.NovoTreinamentoFactory(self);
				self.NovoTreinamentoDialog(true);
				arrumarLayout(self.Treinamentos().length);
			});
		};
		
		self.Editar = function(treinamento) {
			self.NovoTreinamentoHtml(null);
			
			self.Treinamentos(
			   ko.utils.arrayFilter(self.Treinamentos(), function(ser) {
				   return ser.Codigo != treinamento.Codigo;
			   })
		   );
			arrumarLayout(self.Treinamentos().length);
			self.TreinamentoSendoEditado = treinamento;
			$.get('@Url.Action("AddEditTreinamento", "PainelDeControle")', {codigo: treinamento.Codigo }, function (html) {
			    arrumarLayout(self.Treinamentos().length);
			    self.NovoTreinamentoHtml(html);
				new window.NovoTreinamentoFactory(self);
				self.NovoTreinamentoDialog(true);
				arrumarLayout(self.Treinamentos().length);
			});
		};

		self.FecharCadastroDeTreinamentoCancelar = function() {
			if(self.TreinamentoSendoEditado != null){               
			    self.Treinamentos.push(self.TreinamentoSendoEditado);   
			    arrumarLayout(self.Treinamentos().length);
			}
			self.NovoTreinamentoDialog(false);
			arrumarLayout(self.Treinamentos().length);
		};
		
		self.EfetivarExclucao = function() {
			$.post('@Url.Action("ExcluirTreinamento", "PainelDeControle")', { codigo: self.TreinamentoSendoExcluido().Codigo }, function(resposta) {
				if (resposta.Sucesso) {
					//alert("Treinamento excluida com sucesso.");
					arrumarLayout(self.Treinamentos().length);
					self.Treinamentos(
			   ko.utils.arrayFilter(self.Treinamentos(), function(ser) {
			       return ser.Codigo != self.TreinamentoSendoExcluido().Codigo; }));
					arrumarLayout(self.Treinamentos().length);
					self.TreinamentoSendoExcluido(null);
					self.ExcluirTreinamentoDialog(false);
					
				} else {
					//alert("Algum Erro ocorreu durante a exclução desse Treinamento!");
				}
			});
		};
		
		self.AdicionarParticipantes = function(treinamento) {
			self.AdicionarParicipantesHtml(null);
			$.get('@Url.Action("AddEditParticipantesTreinamento")',{ codigoDoTreinamento: treinamento.Codigo} , function(html) {
			    arrumarLayout(self.Treinamentos().length);
			    self.AdicionarParicipantesHtml(html);
				new window.AdicionarParticipanteTreinamentoFactory(self);
				self.AdicionarParicipantesDialog(true);
				arrumarLayout(self.Treinamentos().length);
			});
		};

		self.AdicionarAnexoParaTreinamento = function(treinamento) {
			self.AdicionarAnexoHtml(null);
			$.get('@Url.Action("AddEditAnexoTreinamento", "PainelDeControle")', { codigoDoTreinamento: treinamento.Codigo }, function (html) {
			    arrumarLayout(self.Treinamentos().length);
			    self.AdicionarAnexoHtml(html);
				new window.AdicionarAnexoNoTreinamentoFactory(self);
				self.AdicionarAnexoDialog(true);
				arrumarLayout(self.Treinamentos().length);
			});
		};	

		self.FecharAdicionarAnexoParaTreinamento = function() {
			self.AdicionarAnexoHtml(null);
			self.AdicionarAnexoDialog(false);
			arrumarLayout(self.Treinamentos().length);
		};

		self.FecharGerenciamentoParticipantesCancelar = function () {
			self.AdicionarParicipantesHtml(null);
			self.AdicionarParicipantesDialog(false);
			arrumarLayout(self.Treinamentos().length);
		};
		
		self.FecharAdicionarParticipantesTreinamento = function() {
			self.AdicionarParicipantesHtml(null);
			self.AdicionarParicipantesDialog(false);
			arrumarLayout(self.Treinamentos().length);
		};
		
		self.FecharCadastroDeTreinamento = function (treinamento) {
			self.TreinamentoSendoEditado = null;
			self.Treinamentos.push(new TreinamentosTableView(treinamento, self));
			self.NovoTreinamentoDialog(false);
			arrumarLayout(self.Treinamentos().length);
		};
		
		self.FecharDialogCadastroDeTreinamento = function () {
			self.NovoTreinamentoDialog(false);
			arrumarLayout(self.Treinamentos().length);
		};
		
		self.CancelarExclucao = function() {
			self.ExcluirTreinamentoDialog(false);
			self.TreinamentoSendoExcluido(null);
			arrumarLayout(self.Treinamentos().length);
		};

		self.ExibirMensagemDeExcluir = function(treinamento) {
			self.ExcluirTreinamentoDialog(true);
			self.TreinamentoSendoExcluido(treinamento);
			arrumarLayout(self.Treinamentos().length);
		};
		
		self.generate_excel = function () {
			export_excel("gridTableTreinamentos");
		}; 
	}
	
	function arrumarLayout(indices) {
		if(indices>0) {
			$("#filterTableTreinamento").show();
			$("#resultTableTreinamento").show();
		}else {
			$("#filterTableTreinamento").hide();
			$("#resultTableTreinamento").hide();
		}
	}
	
	function export_excel(tableid) {
		var table= document.getElementById(tableid);
		var html = table.outerHTML;
		window.open('data:application/vnd.ms-excel;base64,' + base64_encode(html));
	}

	function base64_encode (data) {
		var b64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
		var o1, o2, o3, h1, h2, h3, h4, bits, i = 0, ac = 0, enc = "", tmp_arr = [];

		if (!data) {
			return data;
		}

		do {
			o1 = data.charCodeAt(i++);
			o2 = data.charCodeAt(i++);
			o3 = data.charCodeAt(i++);
			bits = o1 << 16 | o2 << 8 | o3;
			h1 = bits >> 18 & 0x3f;
			h2 = bits >> 12 & 0x3f;
			h3 = bits >> 6 & 0x3f;
			h4 = bits & 0x3f;
			tmp_arr[ac++] = b64.charAt(h1) + b64.charAt(h2) + b64.charAt(h3) + b64.charAt(h4);
		} while (i < data.length);
		enc = tmp_arr.join('');
		var r = data.length % 3;
		return (r ? enc.slice(0, r - 3) : enc) + '==='.slice(r || 3);
	}
</script>
