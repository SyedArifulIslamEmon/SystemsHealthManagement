@using Integra.Web.Helpers
@model Integra.Web.Models.AdicionarClinicaDocumentosViewModel

<style>
    #gridDocumentoClinica td, #gridDocumentoClinica th
    {
        font-size: 0.70em!important;
    }
</style>

<div id="DivAddEditDocumentosClinicaViewModel">
    <div class="modal" style="width: auto; min-width: 600px;">
        <div class="modal-header">
            <h4>Gerenciar Documentos</h4>
        </div>
        <div class="modal-body">
            @if (User.ToPessoa().Usuario.PertenceAoGrupo(ViewBag.GrupoIntegra))
            {
                <div class="row-fluid">
                    <div class="span12">
                        <form data-bind="submit: Salvar">
                            <div class="form-horizontal" data-bind="with: NovoDocumentoClinica">
                                <div class="control-group">
                                    <label class="control-label">Data de Vencimento</label>
                                    <div class="controls">
                                        <div class="row-fluid">
                                            <input style="width: 100px;" data-bind="datepicker1: DataDeVencimento, datepickerOptions: { showOn: 'button', buttonImage: '@Url.Content("~/Content/images/ico-calendar.png")    ' , buttonImageOnly: true }" type="text" />
                                            <span class="error-inline" data-bind="validationMessage: DataDeVencimento"></span>
                                        </div>
                                    </div>
                                </div>
                                <div class="control-group">
                                    <label class="control-label">Descrição</label>
                                    <div class="controls">
                                        <div class="row-fluid">
                                            <input type="text" data-bind="value: Descricao" />
                                            <span class="error-inline" data-bind="validationMessage: Descricao"></span>
                                        </div>
                                    </div>
                                </div>
                                <div class="control-group">
                                    <label class="control-label">Tipo do Documento</label>
                                    <div class="controls">
                                        <div class="row-fluid">
                                            <select data-bind="options: $parent.ListaDeTipoDocumentoDaClinica, value: TipoDocumento, optionsText: 'Descricao', optionsvalue: 'Codigo'"></select>
                                            <span class="error-inline" data-bind="validationMessage: TipoDocumento"></span>
                                        </div>
                                    </div>
                                </div>

                                <div class="control-group">
                                    <label class="control-label">Documento</label>
                                    <div class="controls">
                                        <div class="row-fluid">
                                            <input type="file" data-bind="file: Documento" />
                                            <span class="error-inline" data-bind="validationMessage: Documento"></span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="form-actions clearfix">
                                <div class="pull-right">
                                    <button type="submit" class="bbtnn bbtnn-success"><i class='icon-plus'></i>Adicionar</button>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            }
            <div class="row-fluid">
                <div class="span12">
                    <table id="gridDocumentoClinica" data-bind="dataTable:
															{
															    dataSource: Documentos,
															    rowTemplate: 'gridDocumentoClinicaTemplate',
															    sPaginationType: 'bootstrap',
															    iDisplayLength: 2,
															    gridId: 'gridDocumentoClinica',
															    sDom: 'fptr',
															    autoWidth: false,
															    columns:
																	[
																		{ 'name': 'Descricao' },
																		{ 'name': 'TipoDocumento' },
																		{ 'name': 'Responsavel' },
																		{ 'name': 'DataDeUpload' },
																	    { 'name': 'DataDeVencimento2' },
																	    { 'name': 'StatusDocumento'  }
																	],
															    options: {
															        oLanguage: {
															            sUrl: '@Url.Content("~/Content/table-lang-br.txt")    '
                                                            }
                                                        }
                                                        }"
						class="table table-striped table-bordered table-hover">
                        <thead>
                            <tr>
                                <th>Descrição</th>
                                <th>Tipo Documento</th>
                                <th>Responsável</th>
                                <th>Enviado em</th>
                                <th>Vencimento</th>
                                <th>Status</th>
                                <th id="filterTableDocumentoClinica"></th>
                            </tr>
                        </thead>
                        <tbody>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <div class="modal-footer">
            <button data-bind="click: Fechar" class="bbtnn bbtnn-gray" value="Fechar">Fechar</button>
        </div>
    </div>
</div>

<script id="gridDocumentoClinicaTemplate" type="text/html">
    <td data-bind="text: Descricao" style="min-width: 160px!important;"></td>
    <td data-bind="text: TipoDocumento" style="width: 120px;"></td>
    <td data-bind="text: Responsavel" style="min-width: 100px;"></td>
    <td data-bind="dateExtension: DataDeUpload" style="width: 90px;"></td>
    <td data-bind="dateExtension: DataDeVencimento2" style="width: 90px;"></td>
    <td style="text-align: center; width: 80px;"><span class="" data-bind="text: StatusDocumento, attr: { 'class': applyCssStyle}"></span></td>
    <td id="resultTableDocumentoClinica" style="text-align: center; width: 20px;">
        <div class='hidden-phone visible-desktop btn-group'>
            <button data-bind="click: Baixar" class='btn btn-mini btn-info tooltip-info' data-rel="tooltip" title="Baixar" data-placement="left"><i class='icon-download-alt'></i></button>
            @if (User.ToPessoa().Usuario.PertenceAoGrupo(ViewBag.GrupoIntegra))
            {
                <button data-bind="click: Excluir" class='btn btn-mini btn-danger tooltip-info' data-rel="tooltip" title="Excluir" data-placement="left"><i class='icon-trash'></i></button>
                <button data-bind="click: Alterar" class='btn btn-mini btn-warning tooltip-warning' data-rel="tooltip" title="Alterar Status" data-placement="left"><i class='icon-refresh'></i></button>
            }
        </div>
    </td>
</script>

<input type="hidden" value="@Html.Raw(Json.Encode(Model))" id="AddEditClinicaDocumentosModel"/>

<script>
    function ClinicaDocumentoFactory(parent) {
        var view = new AdicionarDocumentoNaClinicaViewModel(parent);
        view.Carregar();
        ko.applyBindings(view, $("#DivAddEditDocumentosClinicaViewModel").get(0));
    }
	
    function showHide(indices) {
        if(indices>0) {
            $("#filterTableDocumentoClinica").show();
            $("#resultTableDocumentoClinica").show();
        }else {
            $("#filterTableDocumentoClinica").hide();
            $("#resultTableDocumentoClinica").hide();
        }
    }

    function AdicionarDocumentoNaClinicaViewModel(parent) {
        var self = this;
        self.Parent = parent;
        self.Model = jQuery.parseJSON($("#AddEditClinicaDocumentosModel").val());
        var novoDocumentoClinica = new NovoDocumentoClinicaViewModel();
        self.NovoDocumentoClinica = ko.validatedObservable(novoDocumentoClinica);

        self.ListaDeTipoDocumentoDaClinica = ko.observableArray(self.Model.ListaDeTipoDocumentoDaClinica);

        self.Carregar = function() {
            var allData = @Html.Raw(Json.Encode(Model.Documentos));
            
            if (allData != null) {
                var mappedData = jQuery.map(allData, function(item) { return new DocumentoClinicaViewModel(item, self); });
                self.Documentos = ko.observableArray(mappedData);
            } else {
                self.Documentos = null;
            }

            showHide(self.Documentos().length);
        };

        self.AtualizarDataVencimento = function(codigoDoDocumento) {
            $.ajax({
                url: '@Url.Action("AtualizarDataDeVencimento", "GestaoDeClinicas")',
                type: 'POST',
                data: JSON.stringify({ DataVencimento: self.NovoDocumentoClinica().DataDeVencimento(), CodigoDaClinica: @Model.CodigoDaClinica, CodigoDoDocumento: codigoDoDocumento }),
                dataType: 'json',
                contentType: 'application/json',
                success: self.Retorno2,
                cache: false,
                processData: false
            });
        };

        self.Retorno = function(retorno) {
            if (retorno.Sucesso) {
                self.AtualizarDataVencimento(retorno.Documento.Codigo);
            }
        };

        self.Retorno2 = function(retorno) {
            if (retorno.Sucesso) {
                self.Documentos.push(new DocumentoClinicaViewModel(retorno.Documento, self));
                self.NovoDocumentoClinica().Limpar();
                self.NovoDocumentoClinica.errors.showAllMessages(false);
                showHide(self.Documentos().length);
            }
        };
        self.Enviar = function() {
            $.ajax({
                url: '@Url.Action("AddEditClinicaDocumentos", null, "Clinica")',
                type: 'POST',
                data: self.NovoDocumentoClinica().ToFormData(),
                async: false,
                success: self.Retorno,
                cache: false,
                contentType: false,
                processData: false
            });
            showHide(self.Documentos().length);
        };

        self.Excluir = function(documento) {
            $.post('@Url.Action("ExcluirDocumentoClinica", null, "Clinica")', { codigoDaClinica: @Model.CodigoDaClinica, codigoDoDocumento: documento.Codigo }, function(retorno) {
                if (retorno.Sucesso) {
                    self.Documentos(ko.utils.arrayFilter(self.Documentos(), function(item) {
                        return item.Codigo != retorno.CodigoDoDocumento;
                    }));
                    showHide(self.Documentos().length);
                }
            });
        };
        
        self.Alterar = function(documento) {
            $.post('@Url.Action("AlterarClinicaDocumentos", null, "Clinica")', { codigoDaClinica: @Model.CodigoDaClinica, codigoDoDocumento: documento.Codigo, status: documento.StatusDocumento }, function(retorno) {
                if (retorno.Sucesso) {
                    self.Documentos(ko.utils.arrayFilter(self.Documentos(), function(item) {
                        return item.Codigo != documento.Codigo;
                    }));
                }
                self.Documentos.push(new DocumentoClinicaViewModel(retorno.Documento, self));
                });
            };
        
            self.Salvar = function() {
                if (self.NovoDocumentoClinica.isValid()) {
                    self.Enviar();
                } else {
                    self.NovoDocumentoClinica.errors.showAllMessages(true);
                }
            };

            self.Baixar = function(documento) {
                $.fileDownload('@Url.Action("BaixarDocumento", null, "Clinica")', { httpMethod: "POST", data: { codigoDaClinica: @Model.CodigoDaClinica, codigoDoDocumento: documento.Codigo } });
            };

            self.Fechar = function() {
                self.Parent.FecharAdicionarDocumentoParaClinica();
            };
        }

            function NovoDocumentoClinicaViewModel() {
                var self = this;
                self.Descricao = ko.observable().extend({ required: true });
                self.Documento = ko.observable().extend({ required: true });
                self.TipoDocumento = ko.observable();
                self.DataDeVencimento = ko.observable().extend({ required: true });;
                self.ToFormData = function() {
                    var formData = new window.FormData();
                    formData.append('Documento', self.Documento());
                    formData.append('Descricao', self.Descricao());
                    formData.append('CodigoDaClinica', @Model.CodigoDaClinica);
                formData.append('TipoDocumento', self.TipoDocumento().Codigo);
                formData.append('DataDeVencimento', self.DataDeVencimento());

                return formData;
            };

            self.Limpar = function() {
                self.Codigo = 0;
                self.Descricao(null);
                self.Documento(null);
            };
        }

        function DocumentoClinicaViewModel(data, parent) {
            var self = this;
            self.Parent = parent;
            self.Codigo = data.Codigo;
            self.Descricao = ko.observable(data.Descricao);
            self.Responsavel = ko.observable(data.Responsavel);
            self.TipoDocumento = ko.observable(data.TipoDoDocumento);
            self.DataDeUpload = ko.observable(data.DataDeUpload);
            self.DataDeVencimento2 = ko.observable(data.DataDeVencimento);
            self.StatusDocumento = ko.observable(data.StatusDocumento);
		    
            self.Baixar = function(documento) {
                self.Parent.Baixar(documento);
            };

            self.Excluir = function(documento) {
                self.Parent.Excluir(documento);
            };

            self.Alterar = function(documento) {
                
                if (self.StatusDocumento() == "Inativo")
                    documento.StatusDocumento = 'Ativo';
                else if (self.StatusDocumento() == "Ativo")
                    documento.StatusDocumento = 'Inativo';
                else
                    documento.StatusDocumento = 'Inativo';
                
                self.Parent.Alterar(documento);
            };


            self.applyCssStyle = ko.computed(function () {
                if (self.StatusDocumento() == "Inativo")
                    return "label label-warning";
                else if (self.StatusDocumento() == "Ativo")
                    return "label label-success";
                else
                    return "label label-info";
            });
        }
</script>
